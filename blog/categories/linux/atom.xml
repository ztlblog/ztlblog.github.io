<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: linux | Blog like hacke]]></title>
  <link href="http://ztlblog.github.io/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://ztlblog.github.io/"/>
  <updated>2015-08-04T15:42:10+08:00</updated>
  <id>http://ztlblog.github.io/</id>
  <author>
    <name><![CDATA[ztl]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[编译php并与Nginx整合]]></title>
    <link href="http://ztlblog.github.io/blog/2015/08/04/linux/"/>
    <updated>2015-08-04T15:32:59+08:00</updated>
    <id>http://ztlblog.github.io/blog/2015/08/04/linux</id>
    <content type="html"><![CDATA[<h4>编译安装php</h4>

<pre><code>1. 下载php  http://cn2.php.net/get/php-5.6.11.tar.bz2/from/this/mirror
2. 解压php  tar xvf php-5.6.11.tar.bz2
3. cd php-5.6.11.tar.bz2
4. ./configure --prefix=/usr/local/php \
    --with-mysql=mysqlnd \
    --enable-mysqlnd \
    --with-gd \
    --enable-gd-native-ttf \
    --enable-gd-jis-conv \
    --enable-fpm
5. make &amp;&amp; make install
</code></pre>

<h4>整合Nginx</h4>

<pre><code>1. cd /usr/local/php
2. cp /usr/local/src/php-5.6.11/php.ini-development  ./lib/php.ini
3. cp ./etc/php-fpm.conf.default  etc/php-fpm.conf
4. ./sbin/php-fpm  开启php
5. 修改Nginx配置
6. locationi ~\.php$ {
        root html;
        fastcgi_pass 127.0.0.1:9000;
        fastcgi_index index.php
        #fastcgi_param SCRIPT_FILENAME /usr/local/nginx/html$fastcgi_script_name;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        include   fastcgi_params;
    }
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nginx切割日志]]></title>
    <link href="http://ztlblog.github.io/blog/2015/08/03/linux/"/>
    <updated>2015-08-03T11:43:05+08:00</updated>
    <id>http://ztlblog.github.io/blog/2015/08/03/linux</id>
    <content type="html"><![CDATA[<p><figure class='code'><figcaption><span>简单的日志切割 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>!bin/bash&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>LOCALPATH=/usr/local/nginx/logs/access.log
</span><span class='line'>BASHPATH=/data&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>back=$LOCALPATH.$(date -d yesterday +%Y%m%d).zcom.access.log&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>mv $LOCALPATH $bakc&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>kill -USR1 $(cat /usr/local/nginx/logs/nginx.pid)&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[coreseek安装及使用]]></title>
    <link href="http://ztlblog.github.io/blog/2015/07/31/linux/"/>
    <updated>2015-07-31T14:38:14+08:00</updated>
    <id>http://ztlblog.github.io/blog/2015/07/31/linux</id>
    <content type="html"><![CDATA[<p><strong>下载coreseek</strong></p>

<pre><code>http://www.coreseek.cn/uploads/csft/3.2/coreseek-3.2.14.tar.gz
</code></pre>

<p><strong>安装mmseg</strong></p>

<pre><code>cd mmseg-3.2.14
./configure --prefix=/usr/local/mmseg3
make &amp;&amp; make install
</code></pre>

<p><strong>可能出错</strong></p>

<pre><code>aclocal
libtoolize --force
automake --add-missing
autoconf
autoheader
make clean
./configure --prefix=/usr/local/mmseg3
make &amp;&amp; make install
</code></pre>

<p><strong>安装csft</strong></p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd csft-3.2.14
</span><span class='line'>./configure &ndash;prefix=/usr/local/csft &ndash;without-unixodbc &ndash;with-mmseg &ndash;with-mmseg-includes=/usr/local/coreseek/include/mmseg/ &ndash;with-mmseg-libs=/usr/local/coreseek/lib/ &ndash;with-mysql&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>make &amp;&amp; make install</span></code></pre></td></tr></table></div></figure></p>

<p><strong>测试mmseg分词</strong></p>

<pre><code>cd testpack
cat var /test/test.xml
/usr/lcoal/mmseg3/bin/mmseg -d /usr/local/mmseg3/etc var/test/test.xml
/usr/local/csft/bin/indexer -c etc/csft.conf --all
/usr/local/csft/bin/search -c etc/csft.conf  网络搜索
</code></pre>

<p><strong>安装php扩展</strong></p>

<pre><code>/usr/local/src/coreseek-3.2.14/testpack/api/libsphinxclient
./configure 

下载php扩展 （http://pecl.php.net/get/sphinx-1.3.3.tgz）
cd  /usr/local/src/sphinx-1.3.3
执行 phpize

./configure --with-php-config=/usr/bin/php-config  --with-sphinx
</code></pre>

<p><strong>创建一个sphinx.conf文件</strong></p>

<pre><code>source src1
{
    type= mysql

    sql_host= localhost
    sql_user= yejianfeng
    sql_pass= test
    sql_db  = mysite
    sql_port= 3306  # optional, default is 3306

    sql_query_pre   = SET NAMES utf8
    sql_query_pre   = SET SESSION query_cache_type=OFF

    sql_query   = select id, id AS id_new,name, name AS name_query,descr, descr AS descr_query,city FROM account
    sql_attr_string = name
    sql_attr_string = descr

    sql_query_info  = SELECT * FROM account WHERE id=$id
}

source src1throttled : src1
{
    sql_ranged_throttle = 100
}

index test1
{
    source  = src1
    path= /home/yejianfeng/instance/coreseek/var/data/test1
    docinfo = extern
    mlock   = 0
    morphology  = none
    min_word_len= 1
    charset_type = zh_cn.utf-8
    charset_dictpath  = /home/yejianfeng/instance/mmseg/etc/
    html_strip  = 0
}



indexer
{
    mem_limit   = 256M
}

searchd
{
    listen  = 9312
    listen  = 9306:mysql41

    log = /home/yejianfeng/instance/coreseek/var/log/searchd.log
    query_log   = /home/yejianfeng/instance/coreseek/var/log/query.log
    read_timeout= 5
    client_timeout  = 300
    max_children= 30
    pid_file= /home/yejianfeng/instance/coreseek/var/log/searchd.pid
    max_matches = 1000
    seamless_rotate = 1
    preopen_indexes = 1
    unlink_old  = 1
    mva_updates_pool= 1M
    max_packet_size = 8M
    max_filters = 256
    max_filter_values   = 4096
}
</code></pre>

<p><strong>php使用</strong></p>

<pre><code>$s = new SphinxClient;
$s-&gt;setServer("localhost", 9312);
$s-&gt;setArrayResult(true);
$s-&gt;setSelect();
$s-&gt;setMatchMode(SPH_MATCH_ALL);

$result = $s-&gt;query('美女', 'test1');
print_r($result);
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux之samba]]></title>
    <link href="http://ztlblog.github.io/blog/2015/07/27/linux004/"/>
    <updated>2015-07-27T14:58:54+08:00</updated>
    <id>http://ztlblog.github.io/blog/2015/07/27/linux004</id>
    <content type="html"><![CDATA[<h2>关闭iptables</h2>

<pre><code>vim /etc/sysconfig/network-scripts/ifcfg-eth0
如何没有DNS  可以加上DNS=8.8.8.8

vim /etc/selinux/config
SELINUX=disabled

iptables -F
</code></pre>

<h2>下载samba</h2>

<pre><code>yum -y install samba
vim /etc/samba/smb.conf

security = user  //用户需要登录
sercurity = share  //用户不需要登录

可以这样添加目录
[tmp]
path=/tmp   //路径
writable=yes  //可以写
public=yes  //可以使用 
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux下如何编译安装软件]]></title>
    <link href="http://ztlblog.github.io/blog/2015/07/20/linux003/"/>
    <updated>2015-07-20T13:10:47+08:00</updated>
    <id>http://ztlblog.github.io/blog/2015/07/20/linux003</id>
    <content type="html"><![CDATA[<h3>基本步骤</h3>

<pre><code>1 ./configure 检查gcc编译器、依赖函数库或软件是否已经安装
2 当configure 检查通过后，生成makefile文件
3 make根据makefile生成可执行文件（二进制文件）
4 make install 到/etc /lib /usr/lib /usr/share /var/lib
</code></pre>

<h3>注意</h3>

<pre><code>/etc 一般放置配置文件
/lib /usr/lib 一般放置函数库 
/var/lib  一般放置数据库
</code></pre>
]]></content>
  </entry>
  
</feed>
